openapi: 3.0.0
info:
  description: An API for organizing epic quests
  version: "0.0.1"
  title: Is It Lit API
  contact:
    email: dev@isitlit.dev
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: authenticated
    description: Secured Owner or Admin-only calls
paths:
  /v0/users:
    get:
      tags:
        - admins
      summary: lists users
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: returns list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: adds a user
      responses:
        '201':
          description: user created
        '400':
          description: returns an invalid input message
        '409':
          description: returns a record already exists message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /v0/users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - authenticated
      summary: gets a user
      responses:
        '200':
          description: returns requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - authenticated
      summary: updates a user
      responses:
        '200':
          description: returns updated user
        '400':
          description: returns an invalid input message
        '409':
          description: returns a no updates submitted message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /v0/users/{userId}/characters:
    parameters:
      - name: userId
        in: path
        description: the uuid of the user
        required: true
        schema:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
    get:
      tags:
        - authenticated
      summary: lists a user's characters
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: returns a list of a user's characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
    post:
      tags:
        - authenticated
      summary: adds a character associated with a user
      responses:
        '201':
          description: returns the created character
        '400':
          description: returns the invalid character
        '409':
          description: returns the existing character
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
  /v0/users/{userId}/characters/{characterId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/characterId'
    get:
      tags:
        - authenticated
      summary: gets the requested character
      responses:
        '200':
          description: returns requested character
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    put:
      tags:
        - authenticated
      summary: updates a character
      responses:
        '200':
          description: returns updated character
        '400':
          description: returns an invalid input message
        '409':
          description: returns a no updates submitted message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
    delete:
      tags:
        - authenticated
      summary: deletes a character
      responses:
        '200':
          description: returns deleted character
  /v0/users/{userId}/relationships:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - authenticated
      summary: lists a user's relationships
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: returns a list of a user's relationships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relationship'
    post:
      tags:
        - authenticated
      summary: adds a relationship between a user's characters or the user and a character
      responses:
        '201':
          description: returns the created relationship
        '400':
          description: returns the invalid relationship
        '409':
          description: returns the existing relationship
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relationship'
  /v0/users/{userId}/relationships/{relationshipId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/relationshipId'
    get:
      tags:
        - authenticated
      summary: gets the requested relationship
      responses:
        '200':
          description: returns requested relationship
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationship'
    put:
      tags:
        - authenticated
      summary: updates a relationship
      responses:
        '200':
          description: returns updated relationship
        '400':
          description: returns an invalid input message
        '409':
          description: returns a no updates submitted message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relationship'
    delete:
      tags:
        - authenticated
      summary: deletes a relationship
      responses:
        '200':
          description: returns deleted relationship
  /v0/users/{userId}/parties:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - authenticated
      summary: lists a user's parties
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: returns a list of a user's parties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Party'
    post:
      tags:
        - authenticated
      summary: adds a party composed of a user's characters
      responses:
        '201':
          description: returns the created party
        '400':
          description: returns the invalid party
        '409':
          description: returns the existing party
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
  /v0/users/{userId}/parties/{partyId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/partyId'
    get:
      tags:
        - authenticated
      summary: gets the requested party
      responses:
        '200':
          description: returns requested party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Party'
    put:
      tags:
        - authenticated
      summary: updates a party
      responses:
        '200':
          description: returns updated party
        '400':
          description: returns an invalid input message
        '409':
          description: returns a no updates submitted message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Party'
    delete:
      tags:
        - authenticated
      summary: deletes a party
      responses:
        '200':
          description: returns deleted party
  /v0/users/{userId}/quests:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - authenticated
      summary: lists a user's quests
      parameters:
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: returns a list of a user's quests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quest'
    post:
      tags:
        - authenticated
      summary: adds a quest
      responses:
        '201':
          description: returns the created quest
        '400':
          description: returns the invalid quest
        '409':
          description: returns the existing quest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quest'
  /v0/users/{userId}/quests/{questId}:
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/questId'
    get:
      tags:
        - authenticated
      summary: gets the requested quest
      responses:
        '200':
          description: returns requested quest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
    put:
      tags:
        - authenticated
      summary: updates a quest
      responses:
        '200':
          description: returns updated quest
        '400':
          description: returns an invalid input message
        '409':
          description: returns a no updates submitted message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quest'
    delete:
      tags:
        - authenticated
      summary: deletes a quest
      responses:
        '200':
          description: returns deleted quest
components:
  parameters:
    userId:
      name: userId
      in: path
      description: the uuid of the user
      required: true
      schema:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
    characterId:
      name: characterId
      in: path
      description: the uuid of the character
      required: true
      schema:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
    relationshipId:
      name: relationshipId
      in: path
      description: the uuid of the relationship
      required: true
      schema:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
    partyId:
      name: partyId
      in: path
      description: the uuid of the party
      required: true
      schema:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
    questId:
      name: questId
      in: path
      description: the uuid of the quest
      required: true
      schema:
        type: string
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
  schemas:
    User:
      type: object
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/parameters/userId'
        name:
          type: string
          example: Ada Lovelace
    Character:
      type: object
      required:
        - id
        - userId
        - name
        - contactInfo
      properties:
        id:
          $ref: '#/components/parameters/characterId'
        userId:
          $ref: '#/components/parameters/userId'
        name:
          type: string
          example: Jenny
        contactInfo:
          type: string
          example: 867-5309
        interests:
          type: array
          items:
            type: string
            example: dressage
    Relationship:
      type: object
      required:
        - id
        - userId
        - members
        - score
      properties:
        id:
          $ref: '#/components/parameters/relationshipId'
        userId:
          $ref: '#/components/parameters/userId'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        score:
          type: number
          format: int32
          example: -1
        name:
          type: string
          example: The twins
    Party:
      type: object
      required:
        - id
        - userId
        - members
      properties:
        id:
          $ref: '#/components/parameters/partyId'
        userId:
          $ref: '#/components/parameters/userId'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        name:
          type: string
          example: The crew
    Quest:
      type: object
      required:
        - id
        - userId
        - partyId
        - name
        - date
      properties:
        id:
          $ref: '#/components/parameters/questId'
        userId:
          $ref: '#/components/parameters/userId'
        partyId:
          $ref: '#/components/parameters/partyId'
        name:
          type: string
          example: The Adventure of a Lifetime
        description:
          type: string
          example: A quest of epic proportions
        date:
          type: string
          format: date-time
          example: "1985-04-12T23:20:50.52Z"
        locations:
          type: array
          items:
            type: string
            example: the vastness of space
